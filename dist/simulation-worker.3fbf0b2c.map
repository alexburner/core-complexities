{"version":3,"sources":["simulation/neighbors.ts","simulation/behavior/orbits.ts","simulation/behavior/behavior.ts","simulation/bounding/centerScaling.ts","simulation/bounding/bounding.ts","simulation/simulation-worker.ts"],"names":[],"mappings":"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","file":"simulation-worker.3fbf0b2c.map","sourceRoot":"../src","sourcesContent":["import { Particle } from \"./particle\";\nimport { subtract, getMagnitude } from \"./vector-n\";\nimport { map, each } from \"../util\";\n\n/**\n * A relation from one Particle to another\n */\nexport interface Neighbor {\n  index: number;\n  distance: number;\n  delta: Float32Array;\n}\n\n/**\n * Each Particle's Neighbor list, by self-same index\n */\nexport type Neighborhood = Neighbor[][];\n\n/**\n * Calculate the Neighbor[] list for each Particle\n */\nexport const getNeighborhood = (particles: Particle[]): Neighborhood =>\n  map(particles, particle => {\n    const neighbors: Neighbor[] = [];\n\n    // Find relation with every other Particle\n    each(particles, (other, index) => {\n      if (particle === other) return;\n      const delta = subtract(particle.position, other.position);\n      const distance = getMagnitude(delta);\n      return { index, delta, distance };\n    });\n\n    // Sort relations by nearest -> furthest\n    neighbors.sort((a, b) => a.distance - b.distance);\n\n    return neighbors;\n  });\n","import { BehaviorNames, Behavior } from \"./behavior\";\nimport { each, clamp } from \"../../util\";\nimport {\n  multiply,\n  getMagnitudeSq,\n  setMagnitude,\n  divide,\n  add\n} from \"../vector-n\";\n\nexport interface OrbitsSpec {\n  name: BehaviorNames.Orbits;\n  config: {\n    mass: {\n      g: number;\n      orbiter: number;\n      attractor: number;\n    };\n    distance: {\n      min: number;\n      max: number;\n    };\n  };\n}\n\nexport const orbits: Behavior<OrbitsSpec> = (\n  particles,\n  _neighborhood,\n  config\n) => {\n  // Attract each particle to the center\n  const minDistSq = config.distance.min * config.distance.min;\n  const maxDistSq = config.distance.max * config.distance.max;\n  const mass = config.mass;\n  each(particles, particle => {\n    let force = multiply(particle.position, -1); // vector to center\n    const distanceSq = clamp(getMagnitudeSq(force), minDistSq, maxDistSq);\n    const strength = (mass.g * mass.attractor * mass.orbiter) / distanceSq;\n    force = setMagnitude(force, strength);\n    force = divide(force, config.mass.orbiter);\n    particle.acceleration = add(particle.acceleration, force);\n  });\n};\n","import { Neighborhood } from \"./../neighbors\";\nimport { Particle } from \"../particle\";\nimport { OrbitsSpec, orbits } from \"./orbits\";\n\nexport type BehaviorSpecs = OrbitsSpec;\n\nexport type Behavior<Spec extends BehaviorSpecs> = (\n  particles: Particle[],\n  neighborhood: Neighborhood,\n  config: Spec[\"config\"]\n) => void;\n\nexport enum BehaviorNames {\n  Orbits = \"orbits\"\n}\n\nconst behaviors: { [name in BehaviorNames]: Behavior<BehaviorSpecs> } = {\n  orbits\n};\n\nexport const behavior = (\n  particles: Particle[],\n  neighborhood: Neighborhood,\n  spec: BehaviorSpecs\n) => behaviors[spec.name](particles, neighborhood, spec.config);\n","import { getMagnitudeSq, multiply } from \"./../vector-n\";\nimport { Bounding } from \"./bounding\";\nimport { reduce, each } from \"../../util\";\n\nexport const centerScaling: Bounding = (particles, radius) => {\n  if (particles.length < 1) return;\n\n  // Avoid Math.sqrt\n  const radiusSq = radius * radius;\n\n  // Find longest distance between individual particle & origin\n  const largestMagnitudeSq = reduce(\n    particles,\n    (memo: number, p) => Math.max(memo, getMagnitudeSq(p.position)),\n    0\n  );\n\n  // Abort if already within limits\n  if (largestMagnitudeSq <= radiusSq) return;\n\n  // Scale down all particle positions\n  const factor = radiusSq / largestMagnitudeSq;\n  each(particles, p => (p.position = multiply(p.position, factor)));\n};\n","import { Particle } from \"../particle\";\nimport { centerScaling } from \"./centerScaling\";\n\nexport type Bounding = (particles: Particle[], radius: number) => void;\n\nexport enum BoundingNames {\n  CenterScaling = \"centerScaling\"\n}\n\nconst boundings: { [name in BoundingNames]: Bounding } = {\n  centerScaling\n};\n\nexport const bounding = (\n  particles: Particle[],\n  radius: number,\n  name: BoundingNames\n) => boundings[name](particles, radius);\n","import { Neighborhood, getNeighborhood } from \"./neighbors\";\nimport { limitMagnitude, add } from \"./vector-n\";\nimport { Particle } from \"./particle\";\nimport { multiply } from \"./vector-n\";\nimport { assertNever, each } from \"../util\";\nimport { BehaviorSpecs, behavior, BehaviorNames } from \"./behavior/behavior\";\nimport { BoundingNames, bounding } from \"./bounding/bounding\";\n\nexport interface SimulationConfig {\n  behaviorSpec: BehaviorSpecs;\n  boundingName: BoundingNames;\n  max: {\n    force: number;\n    speed: number;\n    radius: number;\n  };\n}\n\nexport interface SimulationData {\n  particles: Particle[];\n  neighborhood: Neighborhood;\n}\n\nexport type WorkerMessage =\n  | { type: \"init\"; particles: Particle[]; config?: SimulationConfig }\n  | { type: \"tick\" }\n  | { type: \"destroy\" };\n\n/**\n * TypeScript currently does not support loading both \"DOM\" and \"WebWorker\"\n * type definitions (in the tsconfig \"lib\" field), so we are falling back to\n * incomplete types hacked out of the desired definitions file\n *\n * Issue:\n * https://github.com/Microsoft/TypeScript/issues/20595\n *\n * Hack:\n * node_modules/typescript/lib/lib.webworker.d.ts -> typings/custom.d.ts\n *\n * Actual:\n * https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope\n *\n */\nconst context = self as any;\n// TODO const context = (self as any) as DedicatedWorkerGlobalScope;\n\nconst DEFAULT_CONFIG = {\n  behaviorSpec: {\n    name: BehaviorNames.Orbits,\n    config: {\n      mass: {\n        g: 1,\n        orbiter: 1,\n        attractor: 1\n      },\n      distance: {\n        min: 1,\n        max: 1\n      }\n    }\n  },\n  boundingName: BoundingNames.CenterScaling,\n  max: {\n    force: 1,\n    speed: 1,\n    radius: 100\n  }\n};\n\nconst simulation: {\n  config: SimulationConfig;\n  data: SimulationData;\n} = {\n  config: DEFAULT_CONFIG,\n  data: {\n    particles: [],\n    neighborhood: []\n  }\n};\n\nconst isWorkerMessage = (val: any): val is WorkerMessage =>\n  val && typeof val.type === \"string\"; // safe enough\n\ncontext.addEventListener(\"message\", (e: MessageEvent) => {\n  const message = JSON.parse(e.data);\n  if (!isWorkerMessage(message)) return;\n  switch (message.type) {\n    case \"init\": {\n      simulation.config = message.config || DEFAULT_CONFIG;\n      simulation.data.particles = message.particles;\n      simulation.data.neighborhood = getNeighborhood(message.particles);\n      break;\n    }\n\n    case \"tick\": {\n      tick();\n      context.postMessage(JSON.stringify(simulation.data));\n      break;\n    }\n\n    case \"destroy\": {\n      context.close();\n      break;\n    }\n\n    default: {\n      assertNever(message);\n    }\n  }\n});\n\nconst tick = () => {\n  // Reset accelerations\n  each(\n    simulation.data.particles,\n    p => (p.acceleration = multiply(p.acceleration, 0))\n  );\n\n  // Apply particle behavior\n  behavior(\n    simulation.data.particles,\n    simulation.data.neighborhood,\n    simulation.config.behaviorSpec\n  );\n\n  // Update positions\n  each(simulation.data.particles, p => {\n    p.velocity = add(p.velocity, p.acceleration);\n    p.velocity = limitMagnitude(p.velocity, simulation.config.max.speed);\n    p.position = add(p.position, p.velocity);\n  });\n\n  // Apply particle bounding\n  bounding(\n    simulation.data.particles,\n    simulation.config.max.radius,\n    simulation.config.boundingName\n  );\n\n  // Re-calculate Particle relations\n  simulation.data.neighborhood = getNeighborhood(simulation.data.particles);\n};\n"]}